#!/usr/bin/env bash
function gvm_use() {
	if [[ "$1" == "-h" ]]; then
		display_message "Usage: gvm use VERSION[@PKGSET] [--default]"
		return 1
	fi


	if [[ "x$1" == x ]]; then
		if [[ -s "$PWD/.go-version" ]]; then
			local _go_version=$(cat .go-version | tr -d '\n')
			display_message "Using version $_go_version from .go-version"
		else
			display_error "Please specify the version"
			return 1
		fi
	fi

	local _go_version="$1"

	if [[ "$_go_version" =~ ^(.+)@(.+)$ ]]; then
		local VERSION="${BASH_REMATCH[1]}"
		local PKGSET="${BASH_REMATCH[2]}"
	else
		local VERSION=$_go_version
        fi

	fuzzy_match=$($LS_PATH "$GVM_ROOT/gos" | $SORT_PATH | $GREP_PATH "$VERSION" | $HEAD_PATH -n 1 | $GREP_PATH "$VERSION")
	if [[ "$?" != "0" ]]; then
		GO_CACHE_PATH=$GVM_ROOT/archive/go
		version=$(cd "$GO_CACHE_PATH" && git tag -l "$VERSION")
		if [[ "x$version" == "x" ]]; then
			display_error "Version not found locally. Try 'gvm install $VERSION'" || return 1
		else
			display_warning "$version is not installed. Install it by running 'gvm install $version'" || return 1
		fi
	fi

	gvm_export_path
	. "$GVM_ROOT/environments/$fuzzy_match" &> /dev/null || display_error "Couldn't source environment" || return 1
	gvm_environment_sanitize "$fuzzy_match"
	if [[ "$2" == "--default" ]] || [[ "$1" == "--default" && "$#" == "1" ]]; then
		cp "$GVM_ROOT/environments/$fuzzy_match" "$GVM_ROOT/environments/default" || display_error "Couldn't make $fuzzy_match default"
	fi


	if [[ "x$PKGSET" != "x" ]]; then
		gvm_pkgset_use $PKGSET &> /dev/null || display_error "Couldn't find pkgset $PKGSET for $VERSION" || return 1
	fi
	display_message "Now using version $fuzzy_match"

}

